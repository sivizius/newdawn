__isGlobal__                            equ                                     =
macro global                            something&
{
  match ==, __isGlobal__
  \{
    irp item, something
    \\{
      something
    \\}
  \}
  match , __isGlobal__
  \{
    irp item, something
    \\{
      something
    \\}
  \}
}
macro return                            a, d, x0, x1, x3, x4, x5, x6
{
  match , __isGlobal__
  \{
    if ( ~ ( a eq ))
      mov                               rax,                                    a
    end if
    if ( ~ ( d eq ))
      mov                               rdx,                                    d
    end if
    if ( ~ ( x0 eq ))
      mov                               lib0arg,                                x0
    end if
    if ( ~ ( x1 eq ))
      mov                               lib1arg,                                x1
    end if
    if ( ~ ( x3 eq ))
      mov                               lib3arg,                                x3
    end if
    if ( ~ ( x4 eq ))
      mov                               lib4arg,                                x4
    end if
    if ( ~ ( x5 eq ))
      mov                               lib5arg,                                x5
    end if
    if ( ~ ( x6 eq ))
      mov                               r10,                                    x6
    end if
    mov                                 rsp,                                    rbx
    pop                                 rbx
    ret
  \}
  match ==, __isGlobal__
  \{
    display '[asm:function] could not return outside a function!', 10
    err
  \}
}
newList var@@functions
var@@functions_count                    =                                       null
macro function                          name,                                   argumente
{
  if ( defined name#@@type )
    display '[asm:var:function] function or variable »', \`name, '« already defined!', 10
    err
  else
    display 'function ', `name, '()', 10
  end if
  local size, __content__, __function__
  macro __function__
  \{
    match , __used_#name#__
    \\{
      display 'unused function: »', `name, '«!', 10
    \\}
    local length, k, lfsrseed, random0, random1, random2, random3, ptr
    __pad__                             16,                                     1
;    dq                                  __address__
;    dq                                  size
    name#@@address:
      displayValue '$ 0x', ( name#@@address )
      __isGlobal__                      equ
      macro var@@llist_vars
      \\{
        var@@llist_reset
      \\}
      push                              rbx
      mov                               rbx,                                    rsp
      add                               rsp,                                    ( .var@@lsize )
      __content__
      virtual                           at null
        var@@llist
        var@@llist_vars
        .var@@lsize                     =                                       (( var@@lsize + __qword__ - 1 ) and ( 0 - __qword__ ))
      end virtual
      __isGlobal__                      equ                                     =
    size                                =                                       ( $ - name#@@address )
  \}
  addList                               var@@functions,                         < __function__ >
  name#@@type                           equ                                     op@@tFunction
  name#@@value                          =                                       ( name#@@address )
  name#@@size                           =                                       size
  var@@functions_count                  =                                       ( var@@functions_count + 1 )
  displayValue 'funtion()     = @0x', name#@@value
  displayValue 'funtion.size  =  0x', name#@@size
  macro name                            argumente
  \{
    local __item__, __count__, __mode__, register
    match any, argumente
    \\{
      ;display '[asm:function] parse arguments....', 10
      __count__                         =                                       null
      irp __item__, argumente
      \\\{
        __mode__                        equ
        match register=: value, __item__
        \\\\{
          __mode__                      equ                                     done
          mov                           register,                               value
        \\\\}
        match , __mode__
        \\\\{
          if      ( __count__ = 0 )
            mov                         lib0arg\\\#,                            __item__
          else if ( __count__ = 1 )
            mov                         lib1arg\#,                              __item__
          else if ( __count__ = 2 )
            mov                         lib2arg\#,                              __item__
          else if ( __count__ = 3 )
            mov                         lib3arg\#,                              __item__
          else if ( __count__ = 4 )
            mov                         lib4arg\#,                              __item__
          else if ( __count__ = 5 )
            mov                         lib5arg\#,                              __item__
          else if ( __count__ = 6 )
            mov                         rax,                                    __item__
          else
            display '[asm:function] cannot handle so many arguments yet! :(', 10
            err
          end if
          __count__                     =                                       ( __count__ + 1 )
        \\\\}
      \\\}
    \\}
    call                                name\#@@address
    __used_#name#__                     equ                                     +
  \}
  macro __content__
}
func                                    fix                                     function