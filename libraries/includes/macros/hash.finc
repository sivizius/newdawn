virtual                                 at null
  virtual@@sbox_rijndael::
  ;{
    ;; 0x#0, 0x#1, 0x#2, 0x#3, 0x#4, 0x#5, 0x#6, 0x#7, 0x#8, 0x#9, 0x#a, 0x#b, 0x#c, 0x#d, 0x#e, 0x#f
    db 0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76 ;;0x0#
    db 0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0 ;;0x1#
    db 0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15 ;;0x2#
    db 0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75 ;;0x3#
    db 0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84 ;;0x4#
    db 0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf ;;0x5#
    db 0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8 ;;0x6#
    db 0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2 ;;0x7#
    db 0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73 ;;0x8#
    db 0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb ;;0x9#
    db 0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79 ;;0xa#
    db 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08 ;;0xb#
    db 0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a ;;0xc#
    db 0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e ;;0xd#
    db 0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf ;;0xe#
    db 0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 ;;0xf#
    virtual@@sbox_rijndael_count        =                                       ( $ / __byte__ )
  ;}
end virtual
virtual                                 at null
  virtual@@glfsr::
  ;{
    dq                                  0x00000003                              ;2
    dq                                  0x00000006                              ;3
    dq                                  0x00000009                              ;4
    dq                                  0x00000014                              ;5
    dq                                  0x00000033                              ;6
    dq                                  0x00000055                              ;7
    dq                                  0x000000b2                              ;8
    dq                                  0x0000013e                              ;9
    dq                                  0x000003a6                              ;10
    dq                                  0x000004fb                              ;11
    dq                                  0x00000965                              ;12
    dq                                  0x00001166                              ;13
    dq                                  0x00002106                              ;14
    dq                                  0x000040ae                              ;15
    dq                                  0x00008634                              ;16
    dq                                  0x0001019a                              ;17
    dq                                  0x000201f0                              ;18
    dq                                  0x00040150                              ;19
    dq                                  0x000802f9                              ;20
    dq                                  0x00100169                              ;21
    dq                                  0x00200287                              ;22
    dq                                  0x0040041e                              ;23
    dq                                  0x00800853                              ;24
    dq                                  0x01000444                              ;25
    dq                                  0x020006d5                              ;26
    dq                                  0x04000112                              ;27
    dq                                  0x0800025a                              ;28
    dq                                  0x10000218                              ;29
    dq                                  0x20000b7d                              ;30
    dq                                  0x40000007                              ;31
    dq                                  0x800003e9                              ;32
    virtual@@glfsr_count                =                                       ( $ / __qword__ )
  ;}
end virtual
struc __hash_char__                     seed,                                   char
{
  local temp, hash
  hash                                  =                                       ( seed xor char )
  repeat                                7                                       ;magic number. randomness <... x ...> performance
    load                                temp byte                               from virtual@@sbox_rijndael:( hash and 0x00000000000000ff )
    ;temp = 0
    hash                                =                                       ((  hash             and 0xffffffffffffff00 ) or temp )
    temp                                =                                       ((  hash             and 0xffff800000000000 ) shr ( 64 - 17 ))                  ;magic number
    hash                                =                                       ((( hash             and 0x00007fffffffffff ) shl  17 ) or temp )               ;works for me
  end repeat
  .                                     =                                       hash
}
struc __hash__                          seed,                                   string
{
  local chars, size, hash
  virtual at 0
    chars::
      db string
    size                                =                                       $
  end virtual
  hash                                  =                                       seed
  repeat                                size
    load                                char byte                               from chars:( % - 1 )
    hash                                __hash_char__                           hash,                                   char
  end repeat
  .                                     =                                       hash
}
struc __LFSR__                          state,                                  size
{
  if ( state = null )
    display '[asm:lfsr] state is null!', 10
    err
  end if
  .                                     =                                       (( state shr 1 ) and (( 1 shl ( size )) - 1 )) + ((( state and 1 ) xor (( state shr 1 ) and 1 )) shl ( size - 1 ))
}
struc __GLFSR__                         state,                                  size
{
  if ( state = null )
    display '[asm:glfsr] state is null!', 10
    err
  else if (( size < 2 ) & ( size >= virtual@@glfsr.count ))
    display '[asm:glfsr] invalid size!', 10
    err
  end if
  local polynom
  load                                  polynom qword                           from virtual@@glfsr:(( size - 2 ) * __qword__ )
  .                                     =                                       ((( state shr 1 ) and (( 1 shl ( size )) - 1 )) xor (( state and 1 ) * polynom ))
}
